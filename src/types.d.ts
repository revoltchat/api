import type { components } from "./api";

type RevoltFeatures = components["schemas"]["RevoltFeatures"];
type BuildInformation = components["schemas"]["BuildInformation"];
type CaptchaFeature = components["schemas"]["CaptchaFeature"];
type Feature = components["schemas"]["Feature"];
type VoiceFeature = components["schemas"]["VoiceFeature"];
type File = components["schemas"]["File"];
type Relationship = components["schemas"]["Relationship"];
type UserStatus = components["schemas"]["UserStatus"];
type BotInformation = components["schemas"]["BotInformation"];
type RelationshipStatus = components["schemas"]["RelationshipStatus"];
type Metadata = components["schemas"]["Metadata"];
type Presence = components["schemas"]["Presence"];
type DataUserProfile = components["schemas"]["DataUserProfile"];
type FieldsUser = components["schemas"]["FieldsUser"];
type OverrideField = components["schemas"]["OverrideField"];
type User = components["schemas"]["User"];
type Bot = components["schemas"]["Bot"];
type FieldsBot = components["schemas"]["FieldsBot"];
type FieldsChannel = components["schemas"]["FieldsChannel"];
type Member = components["schemas"]["Member"];
type MessageWebhook = components["schemas"]["MessageWebhook"];
type SystemMessage = components["schemas"]["SystemMessage"];
type Embed = components["schemas"]["Embed"];
type Interactions = components["schemas"]["Interactions"];
type Masquerade = components["schemas"]["Masquerade"];
type MemberCompositeKey = components["schemas"]["MemberCompositeKey"];
type Special = components["schemas"]["Special"];
type Image = components["schemas"]["Image"];
type Video = components["schemas"]["Video"];
type ImageSize = components["schemas"]["ImageSize"];
type LightspeedType = components["schemas"]["LightspeedType"];
type TwitchType = components["schemas"]["TwitchType"];
type BandcampType = components["schemas"]["BandcampType"];
type ReplyIntent = components["schemas"]["ReplyIntent"];
type SendableEmbed = components["schemas"]["SendableEmbed"];
type Message = components["schemas"]["Message"];
type MessageSort = components["schemas"]["MessageSort"];
type Override = components["schemas"]["Override"];
type Server = components["schemas"]["Server"];
type Channel = components["schemas"]["Channel"];
type Category = components["schemas"]["Category"];
type SystemMessageChannels = components["schemas"]["SystemMessageChannels"];
type Role = components["schemas"]["Role"];
type FieldsServer = components["schemas"]["FieldsServer"];
type LegacyServerChannelType = components["schemas"]["LegacyServerChannelType"];
type FieldsMember = components["schemas"]["FieldsMember"];
type BannedUser = components["schemas"]["BannedUser"];
type ServerBan = components["schemas"]["ServerBan"];
type FieldsRole = components["schemas"]["FieldsRole"];
type EmojiParent = components["schemas"]["EmojiParent"];
type ReportedContent = components["schemas"]["ReportedContent"];
type ContentReportReason = components["schemas"]["ContentReportReason"];
type UserReportReason = components["schemas"]["UserReportReason"];
type MFATicket = components["schemas"]["MFATicket"];
type WebPushSubscription = components["schemas"]["WebPushSubscription"];
type MFAMethod = components["schemas"]["MFAMethod"];
type MFAResponse = components["schemas"]["MFAResponse"];
type ChannelCompositeKey = components["schemas"]["ChannelCompositeKey"];
type RevoltConfig = components["schemas"]["RevoltConfig"];
type Error = components["schemas"]["Error"];
type Id = components["schemas"]["Id"];
type DataEditUser = components["schemas"]["DataEditUser"];
type FlagResponse = components["schemas"]["FlagResponse"];
type DataChangeUsername = components["schemas"]["DataChangeUsername"];
type UserProfile = components["schemas"]["UserProfile"];
type MutualResponse = components["schemas"]["MutualResponse"];
type DataSendFriendRequest = components["schemas"]["DataSendFriendRequest"];
type DataCreateBot = components["schemas"]["DataCreateBot"];
type BotWithUserResponse = components["schemas"]["BotWithUserResponse"];
type PublicBot = components["schemas"]["PublicBot"];
type InviteBotDestination = components["schemas"]["InviteBotDestination"];
type FetchBotResponse = components["schemas"]["FetchBotResponse"];
type OwnedBotsResponse = components["schemas"]["OwnedBotsResponse"];
type DataEditBot = components["schemas"]["DataEditBot"];
type DataEditChannel = components["schemas"]["DataEditChannel"];
type Invite = components["schemas"]["Invite"];
type BulkMessageResponse = components["schemas"]["BulkMessageResponse"];
type DataMessageSend = components["schemas"]["DataMessageSend"];
type DataMessageSearch = components["schemas"]["DataMessageSearch"];
type DataEditMessage = components["schemas"]["DataEditMessage"];
type OptionsBulkDelete = components["schemas"]["OptionsBulkDelete"];
type DataCreateGroup = components["schemas"]["DataCreateGroup"];
type LegacyCreateVoiceUserResponse = components["schemas"]["LegacyCreateVoiceUserResponse"];
type DataSetRolePermissions = components["schemas"]["DataSetRolePermissions"];
type DataDefaultChannelPermissions = components["schemas"]["DataDefaultChannelPermissions"];
type CreateWebhookBody = components["schemas"]["CreateWebhookBody"];
type Webhook = components["schemas"]["Webhook"];
type DataCreateServer = components["schemas"]["DataCreateServer"];
type CreateServerLegacyResponse = components["schemas"]["CreateServerLegacyResponse"];
type FetchServerResponse = components["schemas"]["FetchServerResponse"];
type DataEditServer = components["schemas"]["DataEditServer"];
type DataCreateServerChannel = components["schemas"]["DataCreateServerChannel"];
type AllMemberResponse = components["schemas"]["AllMemberResponse"];
type MemberResponse = components["schemas"]["MemberResponse"];
type DataMemberEdit = components["schemas"]["DataMemberEdit"];
type MemberQueryResponse = components["schemas"]["MemberQueryResponse"];
type DataBanCreate = components["schemas"]["DataBanCreate"];
type BanListResult = components["schemas"]["BanListResult"];
type DataCreateRole = components["schemas"]["DataCreateRole"];
type NewRoleResponse = components["schemas"]["NewRoleResponse"];
type DataEditRole = components["schemas"]["DataEditRole"];
type DataSetServerRolePermission = components["schemas"]["DataSetServerRolePermission"];
type DataPermissionsValue = components["schemas"]["DataPermissionsValue"];
type Emoji = components["schemas"]["Emoji"];
type InviteResponse = components["schemas"]["InviteResponse"];
type InviteJoinResponse = components["schemas"]["InviteJoinResponse"];
type DataCreateEmoji = components["schemas"]["DataCreateEmoji"];
type DataReportContent = components["schemas"]["DataReportContent"];
type DataCreateAccount = components["schemas"]["DataCreateAccount"];
type DataResendVerification = components["schemas"]["DataResendVerification"];
type DataAccountDeletion = components["schemas"]["DataAccountDeletion"];
type AccountInfo = components["schemas"]["AccountInfo"];
type DataChangePassword = components["schemas"]["DataChangePassword"];
type DataChangeEmail = components["schemas"]["DataChangeEmail"];
type ResponseVerify = components["schemas"]["ResponseVerify"];
type DataSendPasswordReset = components["schemas"]["DataSendPasswordReset"];
type DataPasswordReset = components["schemas"]["DataPasswordReset"];
type DataLogin = components["schemas"]["DataLogin"];
type ResponseLogin = components["schemas"]["ResponseLogin"];
type SessionInfo = components["schemas"]["SessionInfo"];
type DataEditSession = components["schemas"]["DataEditSession"];
type MultiFactorStatus = components["schemas"]["MultiFactorStatus"];
type ResponseTotpSecret = components["schemas"]["ResponseTotpSecret"];
type DataHello = components["schemas"]["DataHello"];
type DataOnboard = components["schemas"]["DataOnboard"];
type OptionsFetchSettings = components["schemas"]["OptionsFetchSettings"];
type ChannelUnread = components["schemas"]["ChannelUnread"];

export type { RevoltFeatures, BuildInformation, CaptchaFeature, Feature, VoiceFeature, File, Relationship, UserStatus, BotInformation, RelationshipStatus, Metadata, Presence, DataUserProfile, FieldsUser, OverrideField, User, Bot, FieldsBot, FieldsChannel, Member, MessageWebhook, SystemMessage, Embed, Interactions, Masquerade, MemberCompositeKey, Special, Image, Video, ImageSize, LightspeedType, TwitchType, BandcampType, ReplyIntent, SendableEmbed, Message, MessageSort, Override, Server, Channel, Category, SystemMessageChannels, Role, FieldsServer, LegacyServerChannelType, FieldsMember, BannedUser, ServerBan, FieldsRole, EmojiParent, ReportedContent, ContentReportReason, UserReportReason, MFATicket, WebPushSubscription, MFAMethod, MFAResponse, ChannelCompositeKey, RevoltConfig, Error, Id, DataEditUser, FlagResponse, DataChangeUsername, UserProfile, MutualResponse, DataSendFriendRequest, DataCreateBot, BotWithUserResponse, PublicBot, InviteBotDestination, FetchBotResponse, OwnedBotsResponse, DataEditBot, DataEditChannel, Invite, BulkMessageResponse, DataMessageSend, DataMessageSearch, DataEditMessage, OptionsBulkDelete, DataCreateGroup, LegacyCreateVoiceUserResponse, DataSetRolePermissions, DataDefaultChannelPermissions, CreateWebhookBody, Webhook, DataCreateServer, CreateServerLegacyResponse, FetchServerResponse, DataEditServer, DataCreateServerChannel, AllMemberResponse, MemberResponse, DataMemberEdit, MemberQueryResponse, DataBanCreate, BanListResult, DataCreateRole, NewRoleResponse, DataEditRole, DataSetServerRolePermission, DataPermissionsValue, Emoji, InviteResponse, InviteJoinResponse, DataCreateEmoji, DataReportContent, DataCreateAccount, DataResendVerification, DataAccountDeletion, AccountInfo, DataChangePassword, DataChangeEmail, ResponseVerify, DataSendPasswordReset, DataPasswordReset, DataLogin, ResponseLogin, SessionInfo, DataEditSession, MultiFactorStatus, ResponseTotpSecret, DataHello, DataOnboard, OptionsFetchSettings, ChannelUnread };
