/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query Node
         * @description Fetch the server configuration for this Revolt instance.
         */
        get: operations["root_root"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Self
         * @description Retrieve your user information.
         */
        get: operations["fetch_self_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{target}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch User
         * @description Retrieve a user's information.
         */
        get: operations["fetch_user_fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Edit User
         * @description Edit currently authenticated user.
         */
        patch: operations["edit_user_edit"];
        trace?: never;
    };
    "/users/{target}/flags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch User Flags
         * @description Retrieve a user's flags.
         */
        get: operations["fetch_user_flags_fetch_user_flags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change Username
         * @description Change your username.
         */
        patch: operations["change_username_change_username"];
        trace?: never;
    };
    "/users/{target}/default_avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Default Avatar
         * @description This returns a default avatar based on the given id.
         */
        get: operations["get_default_avatar_default_avatar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{target}/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch User Profile
         * @description Retrieve a user's profile data.
         *
         *     Will fail if you do not have permission to access the other user's profile.
         */
        get: operations["fetch_profile_profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/dms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Direct Message Channels
         * @description This fetches your direct messages, including any DM and group DM conversations.
         */
        get: operations["fetch_dms_direct_messages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{target}/dm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Open Direct Message
         * @description Open a DM with another user.
         *
         *     If the target is oneself, a saved messages channel is returned.
         */
        get: operations["open_dm_open_dm"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{target}/mutual": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Mutual Friends And Servers
         * @description Retrieve a list of mutual friends and servers with another user.
         */
        get: operations["find_mutual_mutual"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{target}/friend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Accept Friend Request
         * @description Accept another user's friend request.
         */
        put: operations["add_friend_add"];
        post?: never;
        /**
         * Deny Friend Request / Remove Friend
         * @description Denies another user's friend request or removes an existing friend.
         */
        delete: operations["remove_friend_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{target}/block": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Block User
         * @description Block another user by their id.
         */
        put: operations["block_user_block"];
        post?: never;
        /**
         * Unblock User
         * @description Unblock another user by their id.
         */
        delete: operations["unblock_user_unblock"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/friend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Friend Request
         * @description Send a friend request to another user.
         */
        post: operations["send_friend_request_send_friend_request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Bot
         * @description Create a new Revolt bot.
         */
        post: operations["create_create_bot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{target}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Public Bot
         * @description Fetch details of a public (or owned) bot by its id.
         */
        get: operations["fetch_public_fetch_public_bot"];
        put?: never;
        /**
         * Invite Bot
         * @description Invite a bot to a server or group by its id.`
         */
        post: operations["invite_invite_bot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{bot}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Bot
         * @description Fetch details of a bot you own by its id.
         */
        get: operations["fetch_fetch_bot"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/@me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Owned Bots
         * @description Fetch all of the bots that you have control over.
         */
        get: operations["fetch_owned_fetch_owned_bots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bots/{target}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Bot
         * @description Delete a bot by its id.
         */
        delete: operations["delete_delete_bot"];
        options?: never;
        head?: never;
        /**
         * Edit Bot
         * @description Edit bot details by its id.
         */
        patch: operations["edit_edit_bot"];
        trace?: never;
    };
    "/channels/{target}/ack/{message}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Acknowledge Message
         * @description Lets the server and all other clients know that we've seen this message id in this channel.
         */
        put: operations["channel_ack_ack"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Channel
         * @description Fetch channel by its id.
         */
        get: operations["channel_fetch_fetch"];
        put?: never;
        post?: never;
        /**
         * Close Channel
         * @description Deletes a server channel, leaves a group or closes a group.
         */
        delete: operations["channel_delete_delete"];
        options?: never;
        head?: never;
        /**
         * Edit Channel
         * @description Edit a channel object by its id.
         */
        patch: operations["channel_edit_edit"];
        trace?: never;
    };
    "/channels/{target}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Group Members
         * @description Retrieves all users who are part of this group.
         *
         *     This may not return full user information if users are not friends but have mutual connections.
         */
        get: operations["members_fetch_fetch_members"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Invite
         * @description Creates an invite to this channel.
         *
         *     Channel must be a `TextChannel`.
         */
        post: operations["invite_create_create_invite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Messages
         * @description Fetch multiple messages.
         */
        get: operations["message_query_query"];
        put?: never;
        /**
         * Send Message
         * @description Sends a message to the given channel.
         */
        post: operations["message_send_message_send"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for Messages
         * @description This route searches for messages within the given parameters.
         */
        post: operations["message_search_search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/messages/{msg}/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pins a message
         * @description Pins a message by its id.
         */
        post: operations["message_pin_message_pin"];
        /**
         * Unpins a message
         * @description Unpins a message by its id.
         */
        delete: operations["message_unpin_message_unpin"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/messages/{msg}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Message
         * @description Retrieves a message by its id.
         */
        get: operations["message_fetch_fetch"];
        put?: never;
        post?: never;
        /**
         * Delete Message
         * @description Delete a message you've sent or one you have permission to delete.
         */
        delete: operations["message_delete_delete"];
        options?: never;
        head?: never;
        /**
         * Edit Message
         * @description Edits a message that you've previously sent.
         */
        patch: operations["message_edit_edit"];
        trace?: never;
    };
    "/channels/{target}/messages/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Bulk Delete Messages
         * @description Delete multiple messages you've sent or one you have permission to delete.
         *
         *     This will always require `ManageMessages` permission regardless of whether you own the message or not.
         *
         *     Messages must have been sent within the past 1 week.
         */
        delete: operations["message_bulk_delete_bulk_delete_messages"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Group
         * @description Create a new group channel.
         */
        post: operations["group_create_create_group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{group_id}/recipients/{member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add Member to Group
         * @description Adds another user to the group.
         */
        put: operations["group_add_member_add_member"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/recipients/{member}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove Member from Group
         * @description Removes a user from the group.
         */
        delete: operations["group_remove_member_remove_member"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/join_call": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join Call
         * @description Asks the voice server for a token to join the call.
         */
        post: operations["voice_join_call"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/permissions/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set Role Permission
         * @description Sets permissions for the specified role in this channel.
         *
         *     Channel must be a `TextChannel` or `VoiceChannel`.
         */
        put: operations["permissions_set_set_role_permissions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/permissions/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set Default Permission
         * @description Sets permissions for the default role in this channel.
         *
         *     Channel must be a `Group`, `TextChannel` or `VoiceChannel`.
         */
        put: operations["permissions_set_default_set_default_permissions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/messages/{msg}/reactions/{emoji}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add Reaction to Message
         * @description React to a given message.
         */
        put: operations["message_react_react_message"];
        post?: never;
        /**
         * Remove Reaction(s) to Message
         * @description Remove your own, someone else's or all of a given reaction.
         *
         *     Requires `ManageMessages` if changing others' reactions.
         */
        delete: operations["message_unreact_unreact_message"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/messages/{msg}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove All Reactions from Message
         * @description Remove your own, someone else's or all of a given reaction.
         *
         *     Requires `ManageMessages` permission.
         */
        delete: operations["message_clear_reactions_clear_reactions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{target}/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a webhook
         * @description Creates a webhook which 3rd party platforms can use to send messages
         */
        post: operations["webhook_create_create_webhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/channels/{channel_id}/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all webhooks
         * @description Gets all webhooks inside the channel
         */
        get: operations["webhook_fetch_all_fetch_webhooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Server
         * @description Create a new server.
         */
        post: operations["server_create_create_server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Server
         * @description Fetch a server by its id.
         */
        get: operations["server_fetch_fetch"];
        put?: never;
        post?: never;
        /**
         * Delete / Leave Server
         * @description Deletes a server if owner otherwise leaves.
         */
        delete: operations["server_delete_delete"];
        options?: never;
        head?: never;
        /**
         * Edit Server
         * @description Edit a server by its id.
         */
        patch: operations["server_edit_edit"];
        trace?: never;
    };
    "/servers/{target}/ack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Mark Server As Read
         * @description Mark all channels in a server as read.
         */
        put: operations["server_ack_ack"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{server}/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Channel
         * @description Create a new Text or Voice channel.
         */
        post: operations["channel_create_create_server_channel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Members
         * @description Fetch all server members.
         */
        get: operations["member_fetch_all_fetch_all"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}/members/{member}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Member
         * @description Retrieve a member.
         */
        get: operations["member_fetch_fetch"];
        put?: never;
        post?: never;
        /**
         * Kick Member
         * @description Removes a member from the server.
         */
        delete: operations["member_remove_kick"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{server}/members/{target}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Edit Member
         * @description Edit a member by their id.
         */
        patch: operations["member_edit_edit"];
        trace?: never;
    };
    "/servers/{target}/members_experimental_query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query members by name
         * @description Query members by a given name, this API is not stable and will be removed in the future.
         */
        get: operations["member_experimental_query_member_experimental_query"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{server}/bans/{target}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Ban User
         * @description Ban a user by their id.
         */
        put: operations["ban_create_ban"];
        post?: never;
        /**
         * Unban user
         * @description Remove a user's ban.
         */
        delete: operations["ban_remove_unban"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}/bans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Bans
         * @description Fetch all bans on a server.
         */
        get: operations["ban_list_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}/invites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Invites
         * @description Fetch all server invites.
         */
        get: operations["invites_fetch_invites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Role
         * @description Creates a new server role.
         */
        post: operations["roles_create_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Role
         * @description Fetch a role by its id.
         */
        get: operations["roles_fetch_fetch"];
        put?: never;
        post?: never;
        /**
         * Delete Role
         * @description Delete a server role by its id.
         */
        delete: operations["roles_delete_delete"];
        options?: never;
        head?: never;
        /**
         * Edit Role
         * @description Edit a role by its id.
         */
        patch: operations["roles_edit_edit"];
        trace?: never;
    };
    "/servers/{target}/permissions/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set Role Permission
         * @description Sets permissions for the specified role in the server.
         */
        put: operations["permissions_set_set_role_permission"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}/permissions/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set Default Permission
         * @description Sets permissions for the default role in this server.
         */
        put: operations["permissions_set_default_set_default_permissions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{target}/emojis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Server Emoji
         * @description Fetch all emoji on a server.
         */
        get: operations["emoji_list_list_emoji"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invites/{target}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Invite
         * @description Fetch an invite by its id.
         */
        get: operations["invite_fetch_fetch"];
        put?: never;
        /**
         * Join Invite
         * @description Join an invite by its ID
         */
        post: operations["invite_join_join"];
        /**
         * Delete Invite
         * @description Delete an invite by its id.
         */
        delete: operations["invite_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom/emoji/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Create New Emoji
         * @description Create an emoji by its Autumn upload id.
         */
        put: operations["emoji_create_create_emoji"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/custom/emoji/{emoji_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Emoji
         * @description Fetch an emoji by its id.
         */
        get: operations["emoji_fetch_fetch_emoji"];
        put?: never;
        post?: never;
        /**
         * Delete Emoji
         * @description Delete an emoji by its id.
         */
        delete: operations["emoji_delete_delete_emoji"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/safety/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Report Content
         * @description Report a piece of content to the moderation team.
         */
        post: operations["report_content_report_content"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/account/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Account
         * @description Create a new account.
         */
        post: operations["create_account_create_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/account/reverify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend Verification
         * @description Resend account creation verification email.
         */
        post: operations["resend_verification_resend_verification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/account/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Confirm Account Deletion
         * @description Schedule an account for deletion by confirming the received token.
         */
        put: operations["confirm_deletion_confirm_deletion"];
        /**
         * Delete Account
         * @description Request to have an account deleted.
         */
        post: operations["delete_account_delete_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/account/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Account
         * @description Fetch account information from the current session.
         */
        get: operations["fetch_account_fetch_account"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/account/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable Account
         * @description Disable an account.
         */
        post: operations["disable_account_disable_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/account/change/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change Password
         * @description Change the current account password.
         */
        patch: operations["change_password_change_password"];
        trace?: never;
    };
    "/auth/account/change/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change Email
         * @description Change the associated account email.
         */
        patch: operations["change_email_change_email"];
        trace?: never;
    };
    "/auth/account/verify/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Email
         * @description Verify an email address.
         */
        post: operations["verify_email_verify_email"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/account/reset_password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Password Reset
         * @description Send an email to reset account password.
         */
        post: operations["send_password_reset_send_password_reset"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Password Reset
         * @description Confirm password reset and change the password.
         */
        patch: operations["password_reset_password_reset"];
        trace?: never;
    };
    "/auth/session/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Login to an account.
         */
        post: operations["login_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Delete current session.
         */
        post: operations["logout_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Sessions
         * @description Fetch all sessions associated with this account.
         */
        get: operations["fetch_all_fetch_all"];
        put?: never;
        post?: never;
        /**
         * Delete All Sessions
         * @description Delete all active sessions, optionally including current one.
         */
        delete: operations["revoke_all_revoke_all"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke Session
         * @description Delete a specific active session.
         */
        delete: operations["revoke_revoke"];
        options?: never;
        head?: never;
        /**
         * Edit Session
         * @description Edit current session information.
         */
        patch: operations["edit_edit"];
        trace?: never;
    };
    "/auth/mfa/ticket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Create MFA ticket
         * @description Create a new MFA ticket or validate an existing one.
         */
        put: operations["create_ticket_create_ticket"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * MFA Status
         * @description Fetch MFA status of an account.
         */
        get: operations["fetch_status_fetch_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/recovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch Recovery Codes
         * @description Fetch recovery codes for an account.
         */
        post: operations["fetch_recovery_fetch_recovery"];
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Generate Recovery Codes
         * @description Re-generate recovery codes for an account.
         */
        patch: operations["generate_recovery_generate_recovery"];
        trace?: never;
    };
    "/auth/mfa/methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get MFA Methods
         * @description Fetch available MFA methods.
         */
        get: operations["get_mfa_methods_get_mfa_methods"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable TOTP 2FA
         * @description Generate a new secret for TOTP.
         */
        put: operations["totp_enable_totp_enable"];
        /**
         * Generate TOTP Secret
         * @description Generate a new secret for TOTP.
         */
        post: operations["totp_generate_secret_totp_generate_secret"];
        /**
         * Disable TOTP 2FA
         * @description Disable TOTP 2FA for an account.
         */
        delete: operations["totp_disable_totp_disable"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/onboard/hello": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Onboarding Status
         * @description This will tell you whether the current account requires onboarding or whether you can continue to send requests as usual. You may skip calling this if you're restoring an existing session.
         */
        get: operations["hello_hello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/onboard/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Onboarding
         * @description This sets a new username, completes onboarding and allows a user to start using Revolt.
         */
        post: operations["complete_complete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/push/subscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Push Subscribe
         * @description Create a new Web Push subscription.
         *
         *     If an existing subscription exists on this session, it will be removed.
         */
        post: operations["subscribe_subscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/push/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unsubscribe
         * @description Remove the Web Push subscription associated with the current session.
         */
        post: operations["unsubscribe_unsubscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/settings/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch Settings
         * @description Fetch settings from server filtered by keys.
         *
         *     This will return an object with the requested keys, each value is a tuple of `(timestamp, value)`, the value is the previously uploaded data.
         */
        post: operations["get_settings_fetch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/settings/set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Settings
         * @description Upload data to save to settings.
         */
        post: operations["set_settings_set"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sync/unreads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch Unreads
         * @description Fetch information about unread state on channels.
         */
        get: operations["get_unreads_unreads"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Server Configuration */
        RevoltConfig: {
            /** @description Revolt API Version */
            revolt: string;
            /** @description Features enabled on this Revolt node */
            features: components["schemas"]["RevoltFeatures"];
            /** @description WebSocket URL */
            ws: string;
            /** @description URL pointing to the client serving this node */
            app: string;
            /** @description Web Push VAPID public key */
            vapid: string;
            /** @description Build information */
            build: components["schemas"]["BuildInformation"];
        };
        /** Feature Configuration */
        RevoltFeatures: {
            /** @description hCaptcha configuration */
            captcha: components["schemas"]["CaptchaFeature"];
            /** @description Whether email verification is enabled */
            email: boolean;
            /** @description Whether this server is invite only */
            invite_only: boolean;
            /** @description File server service configuration */
            autumn: components["schemas"]["Feature"];
            /** @description Proxy service configuration */
            january: components["schemas"]["Feature"];
            /** @description Voice server configuration */
            voso: components["schemas"]["VoiceFeature"];
        };
        /** hCaptcha Configuration */
        CaptchaFeature: {
            /** @description Whether captcha is enabled */
            enabled: boolean;
            /** @description Client key used for solving captcha */
            key: string;
        };
        /** Generic Service Configuration */
        Feature: {
            /** @description Whether the service is enabled */
            enabled: boolean;
            /** @description URL pointing to the service */
            url: string;
        };
        /** Voice Server Configuration */
        VoiceFeature: {
            /** @description Whether voice is enabled */
            enabled: boolean;
            /** @description URL pointing to the voice API */
            url: string;
            /** @description URL pointing to the voice WebSocket server */
            ws: string;
        };
        /** Build Information */
        BuildInformation: {
            /** @description Commit Hash */
            commit_sha: string;
            /** @description Commit Timestamp */
            commit_timestamp: string;
            /** @description Git Semver */
            semver: string;
            /** @description Git Origin URL */
            origin_url: string;
            /** @description Build Timestamp */
            timestamp: string;
        };
        /**
         * Error
         * @description Error information
         */
        Error: {
            /** @description Where this error occurred */
            location: string;
        } & ({
            /** @enum {string} */
            type: "LabelMe";
        } | {
            /** @enum {string} */
            type: "AlreadyOnboarded";
        } | {
            /** @enum {string} */
            type: "UsernameTaken";
        } | {
            /** @enum {string} */
            type: "InvalidUsername";
        } | {
            /** @enum {string} */
            type: "DiscriminatorChangeRatelimited";
        } | {
            /** @enum {string} */
            type: "UnknownUser";
        } | {
            /** @enum {string} */
            type: "AlreadyFriends";
        } | {
            /** @enum {string} */
            type: "AlreadySentRequest";
        } | {
            /** @enum {string} */
            type: "Blocked";
        } | {
            /** @enum {string} */
            type: "BlockedByOther";
        } | {
            /** @enum {string} */
            type: "NotFriends";
        } | {
            /** @enum {string} */
            type: "TooManyPendingFriendRequests";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "UnknownChannel";
        } | {
            /** @enum {string} */
            type: "UnknownAttachment";
        } | {
            /** @enum {string} */
            type: "UnknownMessage";
        } | {
            /** @enum {string} */
            type: "CannotEditMessage";
        } | {
            /** @enum {string} */
            type: "CannotJoinCall";
        } | {
            /** @enum {string} */
            type: "TooManyAttachments";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "TooManyEmbeds";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "TooManyReplies";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "TooManyChannels";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "EmptyMessage";
        } | {
            /** @enum {string} */
            type: "PayloadTooLarge";
        } | {
            /** @enum {string} */
            type: "CannotRemoveYourself";
        } | {
            /** @enum {string} */
            type: "GroupTooLarge";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "AlreadyInGroup";
        } | {
            /** @enum {string} */
            type: "NotInGroup";
        } | {
            /** @enum {string} */
            type: "AlreadyPinned";
        } | {
            /** @enum {string} */
            type: "NotPinned";
        } | {
            /** @enum {string} */
            type: "UnknownServer";
        } | {
            /** @enum {string} */
            type: "InvalidRole";
        } | {
            /** @enum {string} */
            type: "Banned";
        } | {
            /** @enum {string} */
            type: "TooManyServers";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "TooManyEmoji";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "TooManyRoles";
            /** Format: uint */
            max: number;
        } | {
            /** @enum {string} */
            type: "AlreadyInServer";
        } | {
            /** @enum {string} */
            type: "ReachedMaximumBots";
        } | {
            /** @enum {string} */
            type: "IsBot";
        } | {
            /** @enum {string} */
            type: "BotIsPrivate";
        } | {
            /** @enum {string} */
            type: "CannotReportYourself";
        } | {
            /** @enum {string} */
            type: "MissingPermission";
            permission: string;
        } | {
            /** @enum {string} */
            type: "MissingUserPermission";
            permission: string;
        } | {
            /** @enum {string} */
            type: "NotElevated";
        } | {
            /** @enum {string} */
            type: "NotPrivileged";
        } | {
            /** @enum {string} */
            type: "CannotGiveMissingPermissions";
        } | {
            /** @enum {string} */
            type: "NotOwner";
        } | {
            /** @enum {string} */
            type: "DatabaseError";
            operation: string;
            collection: string;
        } | {
            /** @enum {string} */
            type: "InternalError";
        } | {
            /** @enum {string} */
            type: "InvalidOperation";
        } | {
            /** @enum {string} */
            type: "InvalidCredentials";
        } | {
            /** @enum {string} */
            type: "InvalidProperty";
        } | {
            /** @enum {string} */
            type: "InvalidSession";
        } | {
            /** @enum {string} */
            type: "DuplicateNonce";
        } | {
            /** @enum {string} */
            type: "NotFound";
        } | {
            /** @enum {string} */
            type: "NoEffect";
        } | {
            /** @enum {string} */
            type: "FailedValidation";
            error: string;
        } | {
            /** @enum {string} */
            type: "ProxyError";
        } | {
            /** @enum {string} */
            type: "VosoUnavailable";
        });
        /** @description User */
        User: {
            /** @description Unique Id */
            _id: string;
            /** @description Username */
            username: string;
            /** @description Discriminator */
            discriminator: string;
            /** @description Display name */
            display_name?: string | null;
            /** @description Avatar attachment */
            avatar?: components["schemas"]["File"] | null;
            /** @description Relationships with other users */
            relations?: components["schemas"]["Relationship"][];
            /**
             * Format: uint32
             * @description Bitfield of user badges
             *
             *     https://docs.rs/revolt-models/latest/revolt_models/v0/enum.UserBadges.html
             */
            badges?: number;
            /** @description User's current status */
            status?: components["schemas"]["UserStatus"] | null;
            /**
             * Format: uint32
             * @description Enum of user flags
             *
             *     https://docs.rs/revolt-models/latest/revolt_models/v0/enum.UserFlags.html
             */
            flags?: number;
            /** @description Whether this user is privileged */
            privileged?: boolean;
            /** @description Bot information */
            bot?: components["schemas"]["BotInformation"] | null;
            /** @description Current session user's relationship with this user */
            relationship: components["schemas"]["RelationshipStatus"];
            /** @description Whether this user is currently online */
            online: boolean;
        };
        /** @description File */
        File: {
            /** @description Unique Id */
            _id: string;
            /** @description Tag / bucket this file was uploaded to */
            tag: string;
            /** @description Original filename */
            filename: string;
            /** @description Parsed metadata of this file */
            metadata: components["schemas"]["Metadata"];
            /** @description Raw content type of this file */
            content_type: string;
            /**
             * Format: int
             * @description Size of this file (in bytes)
             */
            size: number;
            /** @description Whether this file was deleted */
            deleted?: boolean | null;
            /** @description Whether this file was reported */
            reported?: boolean | null;
            message_id?: string | null;
            user_id?: string | null;
            server_id?: string | null;
            /** @description Id of the object this file is associated with */
            object_id?: string | null;
        };
        /** @description Metadata associated with a file */
        Metadata: {
            /** @enum {string} */
            type: "File";
        } | {
            /** @enum {string} */
            type: "Text";
        } | {
            /** @enum {string} */
            type: "Image";
            /** Format: uint */
            width: number;
            /** Format: uint */
            height: number;
        } | {
            /** @enum {string} */
            type: "Video";
            /** Format: uint */
            width: number;
            /** Format: uint */
            height: number;
        } | {
            /** @enum {string} */
            type: "Audio";
        };
        /** @description Relationship entry indicating current status with other user */
        Relationship: {
            /** @description Other user's Id */
            _id: string;
            /** @description Relationship status with them */
            status: components["schemas"]["RelationshipStatus"];
        };
        /**
         * @description User's relationship with another user (or themselves)
         * @enum {string}
         */
        RelationshipStatus: "None" | "User" | "Friend" | "Outgoing" | "Incoming" | "Blocked" | "BlockedOther";
        /** @description User's active status */
        UserStatus: {
            /** @description Custom status text */
            text?: string | null;
            /** @description Current presence option */
            presence?: components["schemas"]["Presence"] | null;
        };
        /**
         * @description Presence status
         * @enum {string}
         */
        Presence: "Online" | "Idle" | "Focus" | "Busy" | "Invisible";
        /** @description Bot information for if the user is a bot */
        BotInformation: {
            /** @description Id of the owner of this bot */
            owner: string;
        };
        Id: string;
        /** @description User flag reponse */
        FlagResponse: {
            /**
             * Format: int32
             * @description Flags
             */
            flags: number;
        };
        /** @description New user information */
        DataEditUser: {
            /** @description New display name */
            display_name?: string | null;
            /** @description Attachment Id for avatar */
            avatar?: string | null;
            /** @description New user status */
            status?: components["schemas"]["UserStatus"] | null;
            /** @description New user profile data
             *
             *     This is applied as a partial. */
            profile?: components["schemas"]["DataUserProfile"] | null;
            /**
             * Format: int32
             * @description Bitfield of user badges
             */
            badges?: number | null;
            /**
             * Format: int32
             * @description Enum of user flags
             */
            flags?: number | null;
            /** @description Fields to remove from user object */
            remove?: components["schemas"]["FieldsUser"][] | null;
        };
        /** @description New user profile data */
        DataUserProfile: {
            /** @description Text to set as user profile description */
            content?: string | null;
            /** @description Attachment Id for background */
            background?: string | null;
        };
        /**
         * @description Optional fields on user object
         * @enum {string}
         */
        FieldsUser: "Avatar" | "StatusText" | "StatusPresence" | "ProfileContent" | "ProfileBackground" | "DisplayName" | "Internal";
        /** Username Information */
        DataChangeUsername: {
            /** @description New username */
            username: string;
            /** @description Current account password */
            password: string;
        };
        /** @description User's profile */
        UserProfile: {
            /** @description Text content on user's profile */
            content?: string | null;
            /** @description Background visible on user's profile */
            background?: components["schemas"]["File"] | null;
        };
        /** @description Channel */
        Channel: {
            /** @enum {string} */
            channel_type: "SavedMessages";
            /** @description Unique Id */
            _id: string;
            /** @description Id of the user this channel belongs to */
            user: string;
        } | {
            /** @enum {string} */
            channel_type: "DirectMessage";
            /** @description Unique Id */
            _id: string;
            /** @description Whether this direct message channel is currently open on both sides */
            active: boolean;
            /** @description 2-tuple of user ids participating in direct message */
            recipients: string[];
            /** @description Id of the last message sent in this channel */
            last_message_id?: string | null;
        } | {
            /** @enum {string} */
            channel_type: "Group";
            /** @description Unique Id */
            _id: string;
            /** @description Display name of the channel */
            name: string;
            /** @description User id of the owner of the group */
            owner: string;
            /** @description Channel description */
            description?: string | null;
            /** @description Array of user ids participating in channel */
            recipients: string[];
            /** @description Custom icon attachment */
            icon?: components["schemas"]["File"] | null;
            /** @description Id of the last message sent in this channel */
            last_message_id?: string | null;
            /**
             * Format: int64
             * @description Permissions assigned to members of this group (does not apply to the owner of the group)
             */
            permissions?: number | null;
            /** @description Whether this group is marked as not safe for work */
            nsfw?: boolean;
        } | {
            /** @enum {string} */
            channel_type: "TextChannel";
            /** @description Unique Id */
            _id: string;
            /** @description Id of the server this channel belongs to */
            server: string;
            /** @description Display name of the channel */
            name: string;
            /** @description Channel description */
            description?: string | null;
            /** @description Custom icon attachment */
            icon?: components["schemas"]["File"] | null;
            /** @description Id of the last message sent in this channel */
            last_message_id?: string | null;
            /** @description Default permissions assigned to users in this channel */
            default_permissions?: components["schemas"]["OverrideField"] | null;
            /** @description Permissions assigned based on role to this channel */
            role_permissions?: {
                [key: string]: components["schemas"]["OverrideField"];
            };
            /** @description Whether this channel is marked as not safe for work */
            nsfw?: boolean;
        } | {
            /** @enum {string} */
            channel_type: "VoiceChannel";
            /** @description Unique Id */
            _id: string;
            /** @description Id of the server this channel belongs to */
            server: string;
            /** @description Display name of the channel */
            name: string;
            /** @description Channel description */
            description?: string | null;
            /** @description Custom icon attachment */
            icon?: components["schemas"]["File"] | null;
            /** @description Default permissions assigned to users in this channel */
            default_permissions?: components["schemas"]["OverrideField"] | null;
            /** @description Permissions assigned based on role to this channel */
            role_permissions?: {
                [key: string]: components["schemas"]["OverrideField"];
            };
            /** @description Whether this channel is marked as not safe for work */
            nsfw?: boolean;
        };
        /** @description Representation of a single permission override as it appears on models and in the database */
        OverrideField: {
            /**
             * Format: int64
             * @description Allow bit flags
             */
            a: number;
            /**
             * Format: int64
             * @description Disallow bit flags
             */
            d: number;
        };
        /** @description Mutual friends and servers response */
        MutualResponse: {
            /** @description Array of mutual user IDs that both users are friends with */
            users: string[];
            /** @description Array of mutual server IDs that both users are in */
            servers: string[];
        };
        /** @description User lookup information */
        DataSendFriendRequest: {
            /** @description Username and discriminator combo separated by # */
            username: string;
        };
        /** @description Bot with user response */
        BotWithUserResponse: {
            user: components["schemas"]["User"];
            /** @description Bot Id */
            _id: string;
            /** @description User Id of the bot owner */
            owner: string;
            /** @description Token used to authenticate requests for this bot */
            token: string;
            /** @description Whether the bot is public (may be invited by anyone) */
            public: boolean;
            /** @description Whether to enable analytics */
            analytics?: boolean;
            /** @description Whether this bot should be publicly discoverable */
            discoverable?: boolean;
            /** @description Reserved; URL for handling interactions */
            interactions_url?: string;
            /** @description URL for terms of service */
            terms_of_service_url?: string;
            /** @description URL for privacy policy */
            privacy_policy_url?: string;
            /**
             * Format: uint32
             * @description Enum of bot flags
             */
            flags?: number;
        };
        /** @description Bot Details */
        DataCreateBot: {
            /** @description Bot username */
            name: string;
        };
        /** @description Where we are inviting a bot to */
        InviteBotDestination: {
            /** @description Server Id */
            server: string;
        } | {
            /** @description Group Id */
            group: string;
        };
        /** @description Public Bot */
        PublicBot: {
            /** @description Bot Id */
            _id: string;
            /** @description Bot Username */
            username: string;
            /** @description Profile Avatar */
            avatar?: string;
            /** @description Profile Description */
            description?: string;
        };
        /** @description Bot Response */
        FetchBotResponse: {
            /** @description Bot object */
            bot: components["schemas"]["Bot"];
            /** @description User object */
            user: components["schemas"]["User"];
        };
        /** @description Bot */
        Bot: {
            /** @description Bot Id */
            _id: string;
            /** @description User Id of the bot owner */
            owner: string;
            /** @description Token used to authenticate requests for this bot */
            token: string;
            /** @description Whether the bot is public (may be invited by anyone) */
            public: boolean;
            /** @description Whether to enable analytics */
            analytics?: boolean;
            /** @description Whether this bot should be publicly discoverable */
            discoverable?: boolean;
            /** @description Reserved; URL for handling interactions */
            interactions_url?: string;
            /** @description URL for terms of service */
            terms_of_service_url?: string;
            /** @description URL for privacy policy */
            privacy_policy_url?: string;
            /**
             * Format: uint32
             * @description Enum of bot flags
             */
            flags?: number;
        };
        /** @description Owned Bots Response
         *
         *     Both lists are sorted by their IDs.
         *
         *     TODO: user should be in bot object */
        OwnedBotsResponse: {
            /** @description Bot objects */
            bots: components["schemas"]["Bot"][];
            /** @description User objects */
            users: components["schemas"]["User"][];
        };
        /** @description New Bot Details */
        DataEditBot: {
            /** @description Bot username */
            name?: string | null;
            /** @description Whether the bot can be added by anyone */
            public?: boolean | null;
            /** @description Whether analytics should be gathered for this bot
             *
             *     Must be enabled in order to show up on [Revolt Discover](https://rvlt.gg). */
            analytics?: boolean | null;
            /** @description Interactions URL */
            interactions_url?: string | null;
            /** @description Fields to remove from bot object */
            remove?: components["schemas"]["FieldsBot"][] | null;
        };
        /**
         * @description Optional fields on bot object
         * @enum {string}
         */
        FieldsBot: "Token" | "InteractionsURL";
        /** @description New webhook information */
        DataEditChannel: {
            /** @description Channel name */
            name?: string | null;
            /** @description Channel description */
            description?: string | null;
            /** @description Group owner */
            owner?: string | null;
            /** @description Icon
             *
             *     Provide an Autumn attachment Id. */
            icon?: string | null;
            /** @description Whether this channel is age-restricted */
            nsfw?: boolean | null;
            /** @description Whether this channel is archived */
            archived?: boolean | null;
            /**
             * @description Fields to remove from channel
             * @default null
             */
            remove: components["schemas"]["FieldsChannel"][] | null;
        };
        /**
         * @description Optional fields on channel object
         * @enum {string}
         */
        FieldsChannel: "Description" | "Icon" | "DefaultPermissions";
        /** @description Invite */
        Invite: {
            /** @enum {string} */
            type: "Server";
            /** @description Invite code */
            _id: string;
            /** @description Id of the server this invite points to */
            server: string;
            /** @description Id of user who created this invite */
            creator: string;
            /** @description Id of the server channel this invite points to */
            channel: string;
        } | {
            /** @enum {string} */
            type: "Group";
            /** @description Invite code */
            _id: string;
            /** @description Id of user who created this invite */
            creator: string;
            /** @description Id of the group channel this invite points to */
            channel: string;
        };
        /** @description Message */
        Message: {
            /** @description Unique Id */
            _id: string;
            /** @description Unique value generated by client sending this message */
            nonce?: string | null;
            /** @description Id of the channel this message was sent in */
            channel: string;
            /** @description Id of the user or webhook that sent this message */
            author: string;
            /** @description The user that sent this message */
            user?: components["schemas"]["User"] | null;
            /** @description The member that sent this message */
            member?: components["schemas"]["Member"] | null;
            /** @description The webhook that sent this message */
            webhook?: components["schemas"]["MessageWebhook"] | null;
            /** @description Message content */
            content?: string | null;
            /** @description System message */
            system?: components["schemas"]["SystemMessage"] | null;
            /** @description Array of attachments */
            attachments?: components["schemas"]["File"][] | null;
            /** @description Time at which this message was last edited */
            edited?: components["schemas"]["ISO8601 Timestamp"] | null;
            /** @description Attached embeds to this message */
            embeds?: components["schemas"]["Embed"][] | null;
            /** @description Array of user ids mentioned in this message */
            mentions?: string[] | null;
            /** @description Array of message ids this message is replying to */
            replies?: string[] | null;
            /** @description Hashmap of emoji IDs to array of user IDs */
            reactions?: {
                [key: string]: string[];
            };
            /** @description Information about how this message should be interacted with */
            interactions?: components["schemas"]["Interactions"];
            /** @description Name and / or avatar overrides for this message */
            masquerade?: components["schemas"]["Masquerade"] | null;
            /** @description Whether or not the message in pinned */
            pinned?: boolean | null;
            /**
             * Format: uint32
             * @description Bitfield of message flags
             *
             *     https://docs.rs/revolt-models/latest/revolt_models/v0/enum.MessageFlags.html
             */
            flags?: number;
        };
        /** @description Server Member */
        Member: {
            /** @description Unique member id */
            _id: components["schemas"]["MemberCompositeKey"];
            /** @description Time at which this user joined the server */
            joined_at: components["schemas"]["ISO8601 Timestamp"];
            /** @description Member's nickname */
            nickname?: string | null;
            /** @description Avatar attachment */
            avatar?: components["schemas"]["File"] | null;
            /** @description Member's roles */
            roles?: string[];
            /** @description Timestamp this member is timed out until */
            timeout?: components["schemas"]["ISO8601 Timestamp"] | null;
        };
        /** @description Composite primary key consisting of server and user id */
        MemberCompositeKey: {
            /** @description Server Id */
            server: string;
            /** @description User Id */
            user: string;
        };
        /**
         * Format: date-time
         * @description ISO8601 formatted timestamp
         * @example 1970-01-01T00:00:00Z
         */
        "ISO8601 Timestamp": string;
        /** @description Information about the webhook bundled with Message */
        MessageWebhook: {
            name: string;
            avatar?: string | null;
        };
        /** @description System Event */
        SystemMessage: {
            /** @enum {string} */
            type: "text";
            content: string;
        } | {
            /** @enum {string} */
            type: "user_added";
            id: string;
            by: string;
        } | {
            /** @enum {string} */
            type: "user_remove";
            id: string;
            by: string;
        } | {
            /** @enum {string} */
            type: "user_joined";
            id: string;
        } | {
            /** @enum {string} */
            type: "user_left";
            id: string;
        } | {
            /** @enum {string} */
            type: "user_kicked";
            id: string;
        } | {
            /** @enum {string} */
            type: "user_banned";
            id: string;
        } | {
            /** @enum {string} */
            type: "channel_renamed";
            name: string;
            by: string;
        } | {
            /** @enum {string} */
            type: "channel_description_changed";
            by: string;
        } | {
            /** @enum {string} */
            type: "channel_icon_changed";
            by: string;
        } | {
            /** @enum {string} */
            type: "channel_ownership_changed";
            from: string;
            to: string;
        } | {
            /** @enum {string} */
            type: "message_pinned";
            id: string;
            by: string;
        } | {
            /** @enum {string} */
            type: "message_unpinned";
            id: string;
            by: string;
        };
        /** @description Embed */
        Embed: {
            /** @enum {string} */
            type: "Website";
            /** @description Direct URL to web page */
            url?: string | null;
            /** @description Original direct URL */
            original_url?: string | null;
            /** @description Remote content */
            special?: components["schemas"]["Special"] | null;
            /** @description Title of website */
            title?: string | null;
            /** @description Description of website */
            description?: string | null;
            /** @description Embedded image */
            image?: components["schemas"]["Image"] | null;
            /** @description Embedded video */
            video?: components["schemas"]["Video"] | null;
            /** @description Site name */
            site_name?: string | null;
            /** @description URL to site icon */
            icon_url?: string | null;
            /** @description CSS Colour */
            colour?: string | null;
        } | {
            /** @enum {string} */
            type: "Image";
            /** @description URL to the original image */
            url: string;
            /**
             * Format: int
             * @description Width of the image
             */
            width: number;
            /**
             * Format: int
             * @description Height of the image
             */
            height: number;
            /** @description Positioning and size */
            size: components["schemas"]["ImageSize"];
        } | {
            /** @enum {string} */
            type: "Video";
            /** @description URL to the original video */
            url: string;
            /**
             * Format: int
             * @description Width of the video
             */
            width: number;
            /**
             * Format: int
             * @description Height of the video
             */
            height: number;
        } | {
            /** @enum {string} */
            type: "Text";
            /** @description URL to icon */
            icon_url?: string | null;
            /** @description URL for title */
            url?: string | null;
            /** @description Title of text embed */
            title?: string | null;
            /** @description Description of text embed */
            description?: string | null;
            /** @description ID of uploaded autumn file */
            media?: components["schemas"]["File"] | null;
            /** @description CSS Colour */
            colour?: string | null;
        } | {
            /** @enum {string} */
            type: "None";
        };
        /** @description Information about special remote content */
        Special: {
            /** @enum {string} */
            type: "None";
        } | {
            /** @enum {string} */
            type: "GIF";
        } | {
            /** @enum {string} */
            type: "YouTube";
            id: string;
            timestamp?: string | null;
        } | {
            /** @enum {string} */
            type: "Lightspeed";
            content_type: components["schemas"]["LightspeedType"];
            id: string;
        } | {
            /** @enum {string} */
            type: "Twitch";
            content_type: components["schemas"]["TwitchType"];
            id: string;
        } | {
            /** @enum {string} */
            type: "Spotify";
            content_type: string;
            id: string;
        } | {
            /** @enum {string} */
            type: "Soundcloud";
        } | {
            /** @enum {string} */
            type: "Bandcamp";
            content_type: components["schemas"]["BandcampType"];
            id: string;
        } | {
            /** @enum {string} */
            type: "AppleMusic";
            album_id: string;
            track_id?: string | null;
        } | {
            /** @enum {string} */
            type: "Streamable";
            id: string;
        };
        /**
         * @description Type of remote Lightspeed.tv content
         * @enum {string}
         */
        LightspeedType: "Channel";
        /**
         * @description Type of remote Twitch content
         * @enum {string}
         */
        TwitchType: "Channel" | "Video" | "Clip";
        /**
         * @description Type of remote Bandcamp content
         * @enum {string}
         */
        BandcampType: "Album" | "Track";
        /** @description Image */
        Image: {
            /** @description URL to the original image */
            url: string;
            /**
             * Format: int
             * @description Width of the image
             */
            width: number;
            /**
             * Format: int
             * @description Height of the image
             */
            height: number;
            /** @description Positioning and size */
            size: components["schemas"]["ImageSize"];
        };
        /**
         * @description Image positioning and size
         * @enum {string}
         */
        ImageSize: "Large" | "Preview";
        /** @description Video */
        Video: {
            /** @description URL to the original video */
            url: string;
            /**
             * Format: int
             * @description Width of the video
             */
            width: number;
            /**
             * Format: int
             * @description Height of the video
             */
            height: number;
        };
        /** @description Information to guide interactions on this message */
        Interactions: {
            /** @description Reactions which should always appear and be distinct */
            reactions?: string[] | null;
            /** @description Whether reactions should be restricted to the given list
             *
             *     Can only be set to true if reactions list is of at least length 1 */
            restrict_reactions?: boolean;
        };
        /** @description Name and / or avatar override information */
        Masquerade: {
            /** @description Replace the display name shown on this message */
            name?: string | null;
            /** @description Replace the avatar shown on this message (URL to image file) */
            avatar?: string | null;
            /** @description Replace the display role colour shown on this message
             *
             *     Must have `ManageRole` permission to use */
            colour?: string | null;
        };
        /** @description Message to send */
        DataMessageSend: {
            /** @description Unique token to prevent duplicate message sending
             *
             *     **This is deprecated and replaced by `Idempotency-Key`!** */
            nonce?: string | null;
            /** @description Message content to send */
            content?: string | null;
            /** @description Attachments to include in message */
            attachments?: string[] | null;
            /** @description Messages to reply to */
            replies?: components["schemas"]["ReplyIntent"][] | null;
            /** @description Embeds to include in message
             *
             *     Text embed content contributes to the content length cap */
            embeds?: components["schemas"]["SendableEmbed"][] | null;
            /** @description Masquerade to apply to this message */
            masquerade?: components["schemas"]["Masquerade"] | null;
            /** @description Information about how this message should be interacted with */
            interactions?: components["schemas"]["Interactions"] | null;
            /**
             * Format: uint32
             * @description Bitfield of message flags
             *
             *     https://docs.rs/revolt-models/latest/revolt_models/v0/enum.MessageFlags.html
             */
            flags?: number | null;
        };
        /** @description What this message should reply to and how */
        ReplyIntent: {
            /** @description Message Id */
            id: string;
            /** @description Whether this reply should mention the message's author */
            mention: boolean;
        };
        /** @description Representation of a text embed before it is sent. */
        SendableEmbed: {
            icon_url?: string | null;
            url?: string | null;
            title?: string | null;
            description?: string | null;
            media?: string | null;
            colour?: string | null;
        };
        /** @description Bulk Message Response */
        BulkMessageResponse: components["schemas"]["Message"][] | {
            /** @description List of messages */
            messages: components["schemas"]["Message"][];
            /** @description List of users */
            users: components["schemas"]["User"][];
            /** @description List of members */
            members?: components["schemas"]["Member"][] | null;
        };
        /**
         * @description Message Sort
         *
         *     Sort used for retrieving messages
         * @enum {string}
         */
        MessageSort: "Relevance" | "Latest" | "Oldest";
        /** @description Options for searching for messages */
        DataMessageSearch: {
            /** @description Full-text search query
             *
             *     See [MongoDB documentation](https://docs.mongodb.com/manual/text-search/#-text-operator) for more information. */
            query?: string | null;
            /** @description Whether to only search for pinned messages, cannot be sent with `query`. */
            pinned?: boolean | null;
            /**
             * Format: int64
             * @description Maximum number of messages to fetch
             */
            limit?: number | null;
            /** @description Message id before which messages should be fetched */
            before?: string | null;
            /** @description Message id after which messages should be fetched */
            after?: string | null;
            /**
             * @description Message sort direction
             *
             *     By default, it will be sorted by latest.
             * @default Relevance
             */
            sort: components["schemas"]["MessageSort"];
            /** @description Whether to include user (and member, if server channel) objects */
            include_users?: boolean | null;
        };
        /** @description Changes to make to message */
        DataEditMessage: {
            /** @description New message content */
            content?: string | null;
            /** @description Embeds to include in the message */
            embeds?: components["schemas"]["SendableEmbed"][] | null;
        };
        /** @description Options for bulk deleting messages */
        OptionsBulkDelete: {
            /** @description Message IDs */
            ids: string[];
        };
        /** @description Create new group */
        DataCreateGroup: {
            /** @description Group name */
            name: string;
            /** @description Group description */
            description?: string | null;
            /** @description Group icon */
            icon?: string | null;
            /**
             * @description Array of user IDs to add to the group
             *
             *     Must be friends with these users.
             * @default []
             */
            users: string[];
            /** @description Whether this group is age-restricted */
            nsfw?: boolean | null;
        };
        /** @description Voice server token response */
        LegacyCreateVoiceUserResponse: {
            /** @description Token for authenticating with the voice server */
            token: string;
        };
        /** @description New role permissions */
        DataSetRolePermissions: {
            /** @description Allow / deny values to set for this role */
            permissions: components["schemas"]["Override"];
        };
        /** @description Representation of a single permission override */
        Override: {
            /**
             * Format: uint64
             * @description Allow bit flags
             */
            allow: number;
            /**
             * Format: uint64
             * @description Disallow bit flags
             */
            deny: number;
        };
        /** @description New default permissions */
        DataDefaultChannelPermissions: {
            /**
             * Format: uint64
             * @description Permission values to set for members in a `Group`
             */
            permissions: number;
        } | {
            /** @description Allow / deny values to set for members in this `TextChannel` or `VoiceChannel` */
            permissions: components["schemas"]["Override"];
        };
        /** @description Webhook */
        Webhook: {
            /** @description Webhook Id */
            id: string;
            /** @description The name of the webhook */
            name: string;
            /** @description The avatar of the webhook */
            avatar?: components["schemas"]["File"] | null;
            /** @description The channel this webhook belongs to */
            channel_id: string;
            /**
             * Format: uint64
             * @description The permissions for the webhook
             */
            permissions: number;
            /** @description The private token for the webhook */
            token?: string | null;
        };
        /** @description Information for the webhook */
        CreateWebhookBody: {
            name: string;
            avatar?: string | null;
        };
        /** @description Information returned when creating server */
        CreateServerLegacyResponse: {
            /** @description Server object */
            server: components["schemas"]["Server"];
            /** @description Default channels */
            channels: components["schemas"]["Channel"][];
        };
        /** @description Server */
        Server: {
            /** @description Unique Id */
            _id: string;
            /** @description User id of the owner */
            owner: string;
            /** @description Name of the server */
            name: string;
            /** @description Description for the server */
            description?: string | null;
            /** @description Channels within this server */
            channels: string[];
            /** @description Categories for this server */
            categories?: components["schemas"]["Category"][] | null;
            /** @description Configuration for sending system event messages */
            system_messages?: components["schemas"]["SystemMessageChannels"] | null;
            /** @description Roles for this server */
            roles?: {
                [key: string]: components["schemas"]["Role"];
            };
            /**
             * Format: int64
             * @description Default set of server and channel permissions
             */
            default_permissions: number;
            /** @description Icon attachment */
            icon?: components["schemas"]["File"] | null;
            /** @description Banner attachment */
            banner?: components["schemas"]["File"] | null;
            /**
             * Format: uint32
             * @description Bitfield of server flags
             */
            flags?: number;
            /** @description Whether this server is flagged as not safe for work */
            nsfw?: boolean;
            /** @description Whether to enable analytics */
            analytics?: boolean;
            /** @description Whether this server should be publicly discoverable */
            discoverable?: boolean;
        };
        /** @description Channel category */
        Category: {
            /** @description Unique ID for this category */
            id: string;
            /** @description Title for this category */
            title: string;
            /** @description Channels in this category */
            channels: string[];
        };
        /** @description System message channel assignments */
        SystemMessageChannels: {
            /** @description ID of channel to send user join messages in */
            user_joined?: string | null;
            /** @description ID of channel to send user left messages in */
            user_left?: string | null;
            /** @description ID of channel to send user kicked messages in */
            user_kicked?: string | null;
            /** @description ID of channel to send user banned messages in */
            user_banned?: string | null;
        };
        /** @description Role */
        Role: {
            /** @description Role name */
            name: string;
            /** @description Permissions available to this role */
            permissions: components["schemas"]["OverrideField"];
            /** @description Colour used for this role
             *
             *     This can be any valid CSS colour */
            colour?: string | null;
            /** @description Whether this role should be shown separately on the member sidebar */
            hoist?: boolean;
            /**
             * Format: int64
             * @description Ranking of this role
             * @default 0
             */
            rank: number;
        };
        /** @description Information about new server to create */
        DataCreateServer: {
            /** @description Server name */
            name: string;
            /** @description Server description */
            description?: string | null;
            /** @description Whether this server is age-restricted */
            nsfw?: boolean | null;
        };
        /** @description Fetch server information */
        FetchServerResponse: components["schemas"]["Server"] | {
            /** @description Channels within this server */
            channels: string[];
            /** @description Unique Id */
            _id: string;
            /** @description User id of the owner */
            owner: string;
            /** @description Name of the server */
            name: string;
            /** @description Description for the server */
            description?: string | null;
            /** @description Categories for this server */
            categories?: components["schemas"]["Category"][] | null;
            /** @description Configuration for sending system event messages */
            system_messages?: components["schemas"]["SystemMessageChannels"] | null;
            /** @description Roles for this server */
            roles?: {
                [key: string]: components["schemas"]["Role"];
            };
            /**
             * Format: int64
             * @description Default set of server and channel permissions
             */
            default_permissions: number;
            /** @description Icon attachment */
            icon?: components["schemas"]["File"] | null;
            /** @description Banner attachment */
            banner?: components["schemas"]["File"] | null;
            /**
             * Format: uint32
             * @description Bitfield of server flags
             */
            flags?: number;
            /** @description Whether this server is flagged as not safe for work */
            nsfw?: boolean;
            /** @description Whether to enable analytics */
            analytics?: boolean;
            /** @description Whether this server should be publicly discoverable */
            discoverable?: boolean;
        };
        /** @description New server information */
        DataEditServer: {
            /** @description Server name */
            name?: string | null;
            /** @description Server description */
            description?: string | null;
            /** @description Attachment Id for icon */
            icon?: string | null;
            /** @description Attachment Id for banner */
            banner?: string | null;
            /** @description Category structure for server */
            categories?: components["schemas"]["Category"][] | null;
            /** @description System message configuration */
            system_messages?: components["schemas"]["SystemMessageChannels"] | null;
            /**
             * Format: int32
             * @description Bitfield of server flags
             */
            flags?: number | null;
            /** @description Whether this server is public and should show up on [Revolt Discover](https://rvlt.gg) */
            discoverable?: boolean | null;
            /** @description Whether analytics should be collected for this server
             *
             *     Must be enabled in order to show up on [Revolt Discover](https://rvlt.gg). */
            analytics?: boolean | null;
            /** @description Fields to remove from server object */
            remove?: components["schemas"]["FieldsServer"][] | null;
        };
        /**
         * @description Optional fields on server object
         * @enum {string}
         */
        FieldsServer: "Description" | "Categories" | "SystemMessages" | "Icon" | "Banner";
        /** @description Create new server channel */
        DataCreateServerChannel: {
            /**
             * @description Channel type
             * @default Text
             */
            type: components["schemas"]["LegacyServerChannelType"];
            /** @description Channel name */
            name: string;
            /** @description Channel description */
            description?: string | null;
            /** @description Whether this channel is age restricted */
            nsfw?: boolean | null;
        };
        /**
         * @description Server Channel Type
         * @enum {string}
         */
        LegacyServerChannelType: "Text" | "Voice";
        /** @description Response with all members */
        AllMemberResponse: {
            /** @description List of members */
            members: components["schemas"]["Member"][];
            /** @description List of users */
            users: components["schemas"]["User"][];
        };
        /** @description Member response */
        MemberResponse: components["schemas"]["Member"] | {
            member: components["schemas"]["Member"];
            roles: {
                [key: string]: components["schemas"]["Role"];
            };
        };
        /** @description New member information */
        DataMemberEdit: {
            /** @description Member nickname */
            nickname?: string | null;
            /** @description Attachment Id to set for avatar */
            avatar?: string | null;
            /** @description Array of role ids */
            roles?: string[] | null;
            /** @description Timestamp this member is timed out until */
            timeout?: components["schemas"]["ISO8601 Timestamp"] | null;
            /** @description Fields to remove from channel object */
            remove?: components["schemas"]["FieldsMember"][] | null;
        };
        /**
         * @description Optional fields on server member object
         * @enum {string}
         */
        FieldsMember: "Nickname" | "Avatar" | "Roles" | "Timeout";
        /** Query members by name */
        MemberQueryResponse: {
            /** @description List of members */
            members: components["schemas"]["Member"][];
            /** @description List of users */
            users: components["schemas"]["User"][];
        };
        /** @description Server Ban */
        ServerBan: {
            /** @description Unique member id */
            _id: components["schemas"]["MemberCompositeKey"];
            /** @description Reason for ban creation */
            reason?: string | null;
        };
        /** @description Information for new server ban */
        DataBanCreate: {
            /** @description Ban reason */
            reason?: string | null;
        };
        /** @description Ban list result */
        BanListResult: {
            /** @description Users objects */
            users: components["schemas"]["BannedUser"][];
            /** @description Ban objects */
            bans: components["schemas"]["ServerBan"][];
        };
        /** @description Just enough information to list a ban */
        BannedUser: {
            /** @description Id of the banned user */
            _id: string;
            /** @description Username of the banned user */
            username: string;
            /** @description Discriminator of the banned user */
            discriminator: string;
            /** @description Avatar of the banned user */
            avatar?: components["schemas"]["File"] | null;
        };
        /** @description Response after creating new role */
        NewRoleResponse: {
            /** @description Id of the role */
            id: string;
            /** @description New role */
            role: components["schemas"]["Role"];
        };
        /** @description Information about new role to create */
        DataCreateRole: {
            /** @description Role name */
            name: string;
            /**
             * Format: int64
             * @description Ranking position
             *
             *     Smaller values take priority.
             */
            rank?: number | null;
        };
        /** @description New role information */
        DataEditRole: {
            /** @description Role name */
            name?: string | null;
            /** @description Role colour */
            colour?: string | null;
            /** @description Whether this role should be displayed separately */
            hoist?: boolean | null;
            /**
             * Format: int64
             * @description Ranking position
             *
             *     Smaller values take priority.
             */
            rank?: number | null;
            /** @description Fields to remove from role object */
            remove?: components["schemas"]["FieldsRole"][] | null;
        };
        /**
         * @description Optional fields on server object
         * @enum {string}
         */
        FieldsRole: "Colour";
        /** @description New role permissions */
        DataSetServerRolePermission: {
            /** @description Allow / deny values for the role in this server. */
            permissions: components["schemas"]["Override"];
        };
        /** @description Data permissions Value - contains allow */
        DataPermissionsValue: {
            /** Format: uint64 */
            permissions: number;
        };
        /** @description Emoji */
        Emoji: {
            /** @description Unique Id */
            _id: string;
            /** @description What owns this emoji */
            parent: components["schemas"]["EmojiParent"];
            /** @description Uploader user id */
            creator_id: string;
            /** @description Emoji name */
            name: string;
            /** @description Whether the emoji is animated */
            animated?: boolean;
            /** @description Whether the emoji is marked as nsfw */
            nsfw?: boolean;
        };
        /** @description Parent Id of the emoji */
        EmojiParent: {
            /** @enum {string} */
            type: "Server";
            id: string;
        } | {
            /** @enum {string} */
            type: "Detached";
        };
        /** @description Public invite response */
        InviteResponse: {
            /** @enum {string} */
            type: "Server";
            /** @description Invite code */
            code: string;
            /** @description Id of the server */
            server_id: string;
            /** @description Name of the server */
            server_name: string;
            /** @description Attachment for server icon */
            server_icon?: components["schemas"]["File"] | null;
            /** @description Attachment for server banner */
            server_banner?: components["schemas"]["File"] | null;
            /**
             * Format: int32
             * @description Enum of server flags
             */
            server_flags?: number | null;
            /** @description Id of server channel */
            channel_id: string;
            /** @description Name of server channel */
            channel_name: string;
            /** @description Description of server channel */
            channel_description?: string | null;
            /** @description Name of user who created the invite */
            user_name: string;
            /** @description Avatar of the user who created the invite */
            user_avatar?: components["schemas"]["File"] | null;
            /**
             * Format: int64
             * @description Number of members in this server
             */
            member_count: number;
        } | {
            /** @enum {string} */
            type: "Group";
            /** @description Invite code */
            code: string;
            /** @description Id of group channel */
            channel_id: string;
            /** @description Name of group channel */
            channel_name: string;
            /** @description Description of group channel */
            channel_description?: string | null;
            /** @description Name of user who created the invite */
            user_name: string;
            /** @description Avatar of the user who created the invite */
            user_avatar?: components["schemas"]["File"] | null;
        };
        /** @description Invite join response */
        InviteJoinResponse: {
            /** @enum {string} */
            type: "Server";
            /** @description Channels in the server */
            channels: components["schemas"]["Channel"][];
            /** @description Server we are joining */
            server: components["schemas"]["Server"];
        } | {
            /** @enum {string} */
            type: "Group";
            /** @description Group channel we are joining */
            channel: components["schemas"]["Channel"];
            /** @description Members of this group */
            users: components["schemas"]["User"][];
        };
        /** @description Create a new emoji */
        DataCreateEmoji: {
            /** @description Server name */
            name: string;
            /** @description Parent information */
            parent: components["schemas"]["EmojiParent"];
            /**
             * @description Whether the emoji is mature
             * @default false
             */
            nsfw: boolean;
        };
        /** Report Data */
        DataReportContent: {
            /** @description Content being reported */
            content: components["schemas"]["ReportedContent"];
            /**
             * @description Additional report description
             * @default
             */
            additional_context: string;
        };
        /** @description The content being reported */
        ReportedContent: {
            /** @enum {string} */
            type: "Message";
            /** @description ID of the message */
            id: string;
            /** @description Reason for reporting message */
            report_reason: components["schemas"]["ContentReportReason"];
        } | {
            /** @enum {string} */
            type: "Server";
            /** @description ID of the server */
            id: string;
            /** @description Reason for reporting server */
            report_reason: components["schemas"]["ContentReportReason"];
        } | {
            /** @enum {string} */
            type: "User";
            /** @description ID of the user */
            id: string;
            /** @description Reason for reporting a user */
            report_reason: components["schemas"]["UserReportReason"];
            /** @description Message context */
            message_id?: string | null;
        };
        /**
         * @description Reason for reporting content (message or server)
         * @enum {string}
         */
        ContentReportReason: "NoneSpecified" | "Illegal" | "IllegalGoods" | "IllegalExtortion" | "IllegalPornography" | "IllegalHacking" | "ExtremeViolence" | "PromotesHarm" | "UnsolicitedSpam" | "Raid" | "SpamAbuse" | "ScamsFraud" | "Malware" | "Harassment";
        /**
         * @description Reason for reporting a user
         * @enum {string}
         */
        UserReportReason: "NoneSpecified" | "UnsolicitedSpam" | "SpamAbuse" | "InappropriateProfile" | "Impersonation" | "BanEvasion" | "Underage";
        /** Error */
        "Authifier Error": {
            /** @enum {string} */
            type: "IncorrectData";
            with: string;
        } | {
            /** @enum {string} */
            type: "DatabaseError";
            operation: string;
            with: string;
        } | {
            /** @enum {string} */
            type: "InternalError";
        } | {
            /** @enum {string} */
            type: "OperationFailed";
        } | {
            /** @enum {string} */
            type: "RenderFail";
        } | {
            /** @enum {string} */
            type: "MissingHeaders";
        } | {
            /** @enum {string} */
            type: "CaptchaFailed";
        } | {
            /** @enum {string} */
            type: "BlockedByShield";
        } | {
            /** @enum {string} */
            type: "InvalidSession";
        } | {
            /** @enum {string} */
            type: "UnverifiedAccount";
        } | {
            /** @enum {string} */
            type: "UnknownUser";
        } | {
            /** @enum {string} */
            type: "EmailFailed";
        } | {
            /** @enum {string} */
            type: "InvalidToken";
        } | {
            /** @enum {string} */
            type: "MissingInvite";
        } | {
            /** @enum {string} */
            type: "InvalidInvite";
        } | {
            /** @enum {string} */
            type: "InvalidCredentials";
        } | {
            /** @enum {string} */
            type: "CompromisedPassword";
        } | {
            /** @enum {string} */
            type: "ShortPassword";
        } | {
            /** @enum {string} */
            type: "Blacklisted";
        } | {
            /** @enum {string} */
            type: "LockedOut";
        } | {
            /** @enum {string} */
            type: "TotpAlreadyEnabled";
        } | {
            /** @enum {string} */
            type: "DisallowedMFAMethod";
        };
        /** Account Data */
        DataCreateAccount: {
            /** @description Valid email address */
            email: string;
            /** @description Password */
            password: string;
            /** @description Invite code */
            invite?: string | null;
            /** @description Captcha verification code */
            captcha?: string | null;
        };
        /** Resend Information */
        DataResendVerification: {
            /** @description Email associated with the account */
            email: string;
            /** @description Captcha verification code */
            captcha?: string | null;
        };
        /** Account Deletion Token */
        DataAccountDeletion: {
            /** @description Deletion token */
            token: string;
        };
        AccountInfo: {
            _id: string;
            email: string;
        };
        /** Change Data */
        DataChangePassword: {
            /** @description New password */
            password: string;
            /** @description Current password */
            current_password: string;
        };
        /** Change Data */
        DataChangeEmail: {
            /** @description Valid email address */
            email: string;
            /** @description Current password */
            current_password: string;
        };
        ResponseVerify: null | {
            /** @description Authorised MFA ticket, can be used to log in */
            ticket: components["schemas"]["MFATicket"];
        };
        /** @description Multi-factor auth ticket */
        MFATicket: {
            /** @description Unique Id */
            _id: string;
            /** @description Account Id */
            account_id: string;
            /** @description Unique Token */
            token: string;
            /** @description Whether this ticket has been validated (can be used for account actions) */
            validated: boolean;
            /** @description Whether this ticket is authorised (can be used to log a user in) */
            authorised: boolean;
            /** @description TOTP code at time of ticket creation */
            last_totp_code?: string | null;
        };
        /** Password Reset */
        DataPasswordReset: {
            /** @description Reset token */
            token: string;
            /** @description New password */
            password: string;
            /**
             * @description Whether to logout all sessions
             * @default false
             */
            remove_sessions: boolean;
        };
        /** Reset Information */
        DataSendPasswordReset: {
            /** @description Email associated with the account */
            email: string;
            /** @description Captcha verification code */
            captcha?: string | null;
        };
        ResponseLogin: {
            /** @enum {string} */
            result: "Success";
            /** @description Unique Id */
            _id: string;
            /** @description User Id */
            user_id: string;
            /** @description Session token */
            token: string;
            /** @description Display name */
            name: string;
            /** @description Web Push subscription */
            subscription?: components["schemas"]["WebPushSubscription"] | null;
        } | {
            /** @enum {string} */
            result: "MFA";
            ticket: string;
            allowed_methods: components["schemas"]["MFAMethod"][];
        } | {
            /** @enum {string} */
            result: "Disabled";
            user_id: string;
        };
        /** @description Web Push subscription */
        WebPushSubscription: {
            endpoint: string;
            p256dh: string;
            auth: string;
        };
        /**
         * @description MFA method
         * @enum {string}
         */
        MFAMethod: "Password" | "Recovery" | "Totp";
        /** Login Data */
        DataLogin: {
            /** @description Email */
            email: string;
            /** @description Password */
            password: string;
            /** @description Friendly name used for the session */
            friendly_name?: string | null;
        } | {
            /** @description Unvalidated or authorised MFA ticket
             *
             *     Used to resolve the correct account */
            mfa_ticket: string;
            /** @description Valid MFA response
             *
             *     This will take precedence over the `password` field where applicable */
            mfa_response?: components["schemas"]["MFAResponse"] | null;
            /** @description Friendly name used for the session */
            friendly_name?: string | null;
        };
        /** @description MFA response */
        MFAResponse: {
            password: string;
        } | {
            recovery_code: string;
        } | {
            totp_code: string;
        };
        SessionInfo: {
            _id: string;
            name: string;
        };
        /** Edit Data */
        DataEditSession: {
            /** @description Session friendly name */
            friendly_name: string;
        };
        MultiFactorStatus: {
            email_otp: boolean;
            trusted_handover: boolean;
            email_mfa: boolean;
            totp_mfa: boolean;
            security_key_mfa: boolean;
            recovery_active: boolean;
        };
        /** Totp Secret */
        ResponseTotpSecret: {
            secret: string;
        };
        /** Onboarding Status */
        DataHello: {
            /** @description Whether onboarding is required */
            onboarding: boolean;
        };
        /** New User Data */
        DataOnboard: {
            /** @description New username which will be used to identify the user on the platform */
            username: string;
        };
        /** @description Options for fetching settings */
        OptionsFetchSettings: {
            /** @description Keys to fetch */
            keys: string[];
        };
        /** @description Channel Unread */
        ChannelUnread: {
            /** @description Composite key pointing to a user's view of a channel */
            _id: components["schemas"]["ChannelCompositeKey"];
            /** @description Id of the last message read in this channel by a user */
            last_id?: string | null;
            /** @description Array of message ids that mention the user */
            mentions?: string[];
        };
        /** @description Composite primary key consisting of channel and user id */
        ChannelCompositeKey: {
            /** @description Channel Id */
            channel: string;
            /** @description User Id */
            user: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root_root: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RevoltConfig"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_self_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_user_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    edit_user_edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataEditUser"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_user_flags_fetch_user_flags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlagResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    change_username_change_username: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataChangeUsername"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    get_default_avatar_default_avatar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Default Avatar Picture */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/png": string;
                };
            };
        };
    };
    fetch_profile_profile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_dms_direct_messages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    open_dm_open_dm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    find_mutual_mutual: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MutualResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    add_friend_add: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    remove_friend_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    block_user_block: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    unblock_user_unblock: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    send_friend_request_send_friend_request: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSendFriendRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    create_create_bot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataCreateBot"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotWithUserResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_public_fetch_public_bot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicBot"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    invite_invite_bot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InviteBotDestination"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_fetch_bot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bot: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchBotResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_owned_fetch_owned_bots: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OwnedBotsResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    delete_delete_bot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    edit_edit_bot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataEditBot"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BotWithUserResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    channel_ack_ack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                message: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    channel_fetch_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    channel_delete_delete: {
        parameters: {
            query?: {
                /** @description Whether to not send a leave message */
                leave_silently?: boolean | null;
            };
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    channel_edit_edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataEditChannel"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    members_fetch_fetch_members: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    invite_create_create_invite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invite"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_query_query: {
        parameters: {
            query?: {
                /** @description Maximum number of messages to fetch
                 *
                 *     For fetching nearby messages, this is \`(limit + 1)\`. */
                limit?: number | null;
                /** @description Message id before which messages should be fetched */
                before?: string | null;
                /** @description Message id after which messages should be fetched */
                after?: string | null;
                /** @description Message sort direction */
                sort?: components["schemas"]["MessageSort"];
                /** @description Message id to search around
                 *
                 *     Specifying 'nearby' ignores 'before', 'after' and 'sort'. It will also take half of limit rounded as the limits to each side. It also fetches the message ID specified. */
                nearby?: string | null;
                /** @description Whether to include user (and member, if server channel) objects */
                include_users?: boolean | null;
            };
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkMessageResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_send_message_send: {
        parameters: {
            query?: never;
            header?: {
                /** @description Unique key to prevent duplicate requests */
                "Idempotency-Key"?: string;
            };
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataMessageSend"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_search_search: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataMessageSearch"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkMessageResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_pin_message_pin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                msg: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_unpin_message_unpin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                msg: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_fetch_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                msg: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_delete_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                msg: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_edit_edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                msg: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataEditMessage"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_bulk_delete_bulk_delete_messages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OptionsBulkDelete"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    group_create_create_group: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataCreateGroup"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    group_add_member_add_member: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: components["schemas"]["Id"];
                member_id: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    group_remove_member_remove_member: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                member: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    voice_join_call: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegacyCreateVoiceUserResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    permissions_set_set_role_permissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSetRolePermissions"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    permissions_set_default_set_default_permissions2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataDefaultChannelPermissions"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_react_react_message: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                msg: components["schemas"]["Id"];
                emoji: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_unreact_unreact_message: {
        parameters: {
            query?: {
                /** @description Remove a specific user's reaction */
                user_id?: string | null;
                /** @description Remove all reactions */
                remove_all?: boolean | null;
            };
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                msg: components["schemas"]["Id"];
                emoji: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    message_clear_reactions_clear_reactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                msg: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    webhook_create_create_webhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWebhookBody"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    webhook_fetch_all_fetch_webhooks: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                channel_id: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Webhook"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    server_create_create_server: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataCreateServer"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServerLegacyResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    server_fetch_fetch: {
        parameters: {
            query?: {
                /** @description Whether to include channels */
                include_channels?: boolean | null;
            };
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FetchServerResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    server_delete_delete: {
        parameters: {
            query?: {
                /** @description Whether to not send a leave message */
                leave_silently?: boolean | null;
            };
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    server_edit_edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataEditServer"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Server"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    server_ack_ack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    channel_create_create_server_channel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataCreateServerChannel"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Channel"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    member_fetch_all_fetch_all: {
        parameters: {
            query?: {
                /** @description Whether to exclude offline users */
                exclude_offline?: boolean | null;
            };
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllMemberResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    member_fetch_fetch: {
        parameters: {
            query?: {
                roles?: boolean | null;
            };
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                member: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    member_remove_kick: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                member: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    member_edit_edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server: components["schemas"]["Id"];
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataMemberEdit"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Member"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    member_experimental_query_member_experimental_query: {
        parameters: {
            query: {
                /** @description String to search for */
                query: string;
                /** @description Discourage use of this API */
                experimental_api: boolean;
            };
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemberQueryResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    ban_create_ban: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server: components["schemas"]["Id"];
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataBanCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerBan"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    ban_remove_unban: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server: components["schemas"]["Id"];
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    ban_list_list: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BanListResult"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    invites_fetch_invites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invite"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    roles_create_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataCreateRole"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewRoleResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    roles_fetch_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    roles_delete_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    roles_edit_edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataEditRole"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    permissions_set_set_role_permission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
                role_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSetServerRolePermission"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Server"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    permissions_set_default_set_default_permissions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataPermissionsValue"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Server"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    emoji_list_list_emoji: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Emoji"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    invite_fetch_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    invite_join_join: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteJoinResponse"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    invite_delete_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    emoji_create_create_emoji: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataCreateEmoji"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Emoji"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    emoji_fetch_fetch_emoji: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emoji_id: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Emoji"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    emoji_delete_delete_emoji: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                emoji_id: components["schemas"]["Id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    report_content_report_content: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataReportContent"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    create_account_create_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataCreateAccount"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    resend_verification_resend_verification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataResendVerification"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    confirm_deletion_confirm_deletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataAccountDeletion"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    delete_account_delete_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_account_fetch_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountInfo"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    disable_account_disable_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    change_password_change_password: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataChangePassword"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    change_email_change_email: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataChangeEmail"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    verify_email_verify_email: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseVerify"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    send_password_reset_send_password_reset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataSendPasswordReset"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    password_reset_password_reset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataPasswordReset"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    login_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataLogin"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseLogin"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    logout_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_all_fetch_all: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionInfo"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    revoke_all_revoke_all: {
        parameters: {
            query?: {
                revoke_self?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    revoke_revoke: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    edit_edit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataEditSession"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionInfo"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    create_ticket_create_ticket: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MFAResponse"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MFATicket"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_status_fetch_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MultiFactorStatus"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    fetch_recovery_fetch_recovery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    generate_recovery_generate_recovery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    get_mfa_methods_get_mfa_methods: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MFAMethod"][];
                };
            };
        };
    };
    totp_enable_totp_enable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MFAResponse"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    totp_generate_secret_totp_generate_secret: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ResponseTotpSecret"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    totp_disable_totp_disable: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    hello_hello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataHello"];
                };
            };
        };
    };
    complete_complete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataOnboard"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    subscribe_subscribe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebPushSubscription"];
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    unsubscribe_unsubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    get_settings_fetch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OptionsFetchSettings"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: [
                            number,
                            string
                        ];
                    };
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    set_settings_set: {
        parameters: {
            query?: {
                /** @description Timestamp of settings change.
                 *
                 *     Used to avoid feedback loops. */
                timestamp?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: string;
                };
            };
        };
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    get_unreads_unreads: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChannelUnread"][];
                };
            };
            /** @description An error occurred. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
